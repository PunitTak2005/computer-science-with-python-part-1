To determine the order of evaluation for the complex expression `4*5 + 7*2 - 8%3 + 4 and 5.7//2 - 1 + 4 or not 2==4 and not 2**4 > 6*2`, we need to follow Python's operator precedence and associativity rules.

### Operator Precedence and Associativity

1. **Exponentiation (`**`)**: Highest precedence.
2. **Unary Negation (`-`)**: Next highest (but not part of this expression).
3. **Multiplication (`*`), Division (`/`), Floor Division (`//`), Modulus (`%`)**: Evaluated next.
4. **Addition (`+`), Subtraction (`-`)**: Evaluated after multiplication/division/modulus.
5. **Comparison (`==`, `>`, `<`, `>=`, `<=`)**: Evaluated next.
6. **Logical NOT (`not`)**: Evaluated before logical AND/OR.
7. **Logical AND (`and`)**: Evaluated before logical OR (`or`).
8. **Logical OR (`or`)**: Lowest precedence.

### Order of Evaluation

1. **Evaluate Exponentiation (`**`)**: 
   - `2**4`

2. **Evaluate Multiplication (`*`), Division (`/`), Floor Division (`//`), Modulus (`%`)**:
   - `4 * 5`
   - `7 * 2`
   - `8 % 3`
   - `5.7 // 2`

3. **Evaluate Addition (`+`), Subtraction (`-`)**:
   - Combine results from multiplication/division/modulus operations.

4. **Evaluate Comparisons (`==`, `>`)**:
   - `2 == 4`
   - `2**4 > 6 * 2`

5. **Evaluate Logical NOT (`not`)**:
   - `not 2 == 4`
   - `not (2**4 > 6 * 2)`

6. **Evaluate Logical AND (`and`)**:
   - Combine results from logical NOT operations.

7. **Evaluate Logical OR (`or`)**:
   - Combine results from the final expressions.

### Detailed Breakdown

Let's compute each step:

1. **Exponentiation**:
   - `2**4` is `16`

2. **Multiplication, Division, Modulus**:
   - `4 * 5` is `20`
   - `7 * 2` is `14`
   - `8 % 3` is `2`
   - `5.7 // 2` is `2.0`

3. **Addition and Subtraction**:
   - Combine: `20 + 14 - 2 + 4` which is `36`

4. **Comparison**:
   - `2 == 4` is `False`
   - `6 * 2` is `12`
   - `16 > 12` is `True`
   - `not (16 > 12)` is `False`

5. **Logical NOT**:
   - `not (2 == 4)` is `True`
   - `not (16 > 12)` is `False`

6. **Logical AND**:
   - `True and False` is `False`

7. **Logical OR**:
   - `2.0 - 1 + 4` is `5.0`
   - `5.0 or False` is `5.0`

### Complete Python Code

```python
# Calculate step by step
result = (4 * 5 + 7 * 2 - 8 % 3 + 4) and (5.7 // 2 - 1 + 4) or not (2 == 4) and not (2 ** 4 > 6 * 2)
print(result)  # Output: 5.0
```

### Summary of Evaluation

1. **Compute Multiplication, Division, Modulus**:
   - `4 * 5` → `20`
   - `7 * 2` → `14`
   - `8 % 3` → `2`
   - `5.7 // 2` → `2.0`

2. **Combine Results**:
   - `20 + 14 - 2 + 4` → `36`

3. **Comparison**:
   - `2 == 4` → `False`
   - `2**4 > 6*2` → `True`
   - `not (2**4 > 6*2)` → `False`

4. **Logical AND/OR**:
   - `2.0 - 1 + 4` → `5.0`
   - `5.0 or False` → `5.0`

The final output of the expression is `5.0`.
