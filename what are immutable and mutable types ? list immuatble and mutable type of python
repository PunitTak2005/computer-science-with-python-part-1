what are immutable and mutable types ? list immuatble and mutable type of python?

In Python, the terms "immutable" and "mutable" refer to whether or not an object's state can be changed after it is created.

### Immutable Types

Immutable objects cannot be altered once they are created. Any operation that seems to modify an immutable object will instead create a new object. Here are some common immutable types in Python:

1. **Integers (`int`)**:
    ```python
    x = 10
    x = x + 1  # This creates a new integer object with value 11
    ```

2. **Floating-point numbers (`float`)**:
    ```python
    y = 3.14
    y = y * 2  # This creates a new float object with value 6.28
    ```

3. **Strings (`str`)**:
    ```python
    s = "hello"
    s = s + " world"  # This creates a new string object "hello world"
    ```

4. **Tuples (`tuple`)**:
    ```python
    t = (1, 2, 3)
    t = t + (4, 5)  # This creates a new tuple (1, 2, 3, 4, 5)
    ```

5. **Frozensets (`frozenset`)**:
    ```python
    fs = frozenset([1, 2, 3])
    ```

6. **Bytes (`bytes`)**:
    ```python
    b = b"hello"
    ```

### Mutable Types

Mutable objects can be changed after they are created. Operations that modify mutable objects do not create new objects but rather alter the original object. Here are some common mutable types in Python:

1. **Lists (`list`)**:
    ```python
    lst = [1, 2, 3]
    lst.append(4)  # This modifies the original list to [1, 2, 3, 4]
    ```

2. **Dictionaries (`dict`)**:
    ```python
    d = {'a': 1, 'b': 2}
    d['c'] = 3  # This modifies the original dictionary to {'a': 1, 'b': 2, 'c': 3}
    ```

3. **Sets (`set`)**:
    ```python
    s = {1, 2, 3}
    s.add(4)  # This modifies the original set to {1, 2, 3, 4}
    ```

4. **Bytearrays (`bytearray`)**:
    ```python
    ba = bytearray(b"hello")
    ba[0] = ord('H')  # This modifies the original bytearray to bytearray(b"Hello")
    ```

### Summary

- **Immutable types**: `int`, `float`, `str`, `tuple`, `frozenset`, `bytes`
- **Mutable types**: `list`, `dict`, `set`, `bytearray`

Understanding whether a type is mutable or immutable is important because it affects how you can work with objects of that type. For example, because lists are mutable, you can modify them in place without creating a new list, which can be more efficient for large datasets. Conversely, because strings are immutable, any operation that modifies a string will create a new string, which can impact performance if done frequently in a loop.
